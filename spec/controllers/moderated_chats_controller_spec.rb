require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ModeratedChatsController do
#
#  # This should return the minimal set of attributes required to create a valid
#  # ModeratedChat. As you add validations to ModeratedChat, be sure to
#  # adjust the attributes here as well.
#  let(:valid_attributes) { { "message" => "MyText" } }
#
#  # This should return the minimal set of values that should be in the session
#  # in order to pass any filters (e.g. authentication) defined in
#  # ModeratedChatsController. Be sure to keep this updated too.
#  let(:valid_session) { {} }
#
#  describe "GET index" do
#    it "assigns all moderated_chats as @moderated_chats" do
#      moderated_chat = ModeratedChat.create! valid_attributes
#      get :index, {}, valid_session
#      assigns(:moderated_chats).should eq([moderated_chat])
#    end
#  end
#
#  describe "GET show" do
#    it "assigns the requested moderated_chat as @moderated_chat" do
#      moderated_chat = ModeratedChat.create! valid_attributes
#      get :show, {:id => moderated_chat.to_param}, valid_session
#      assigns(:moderated_chat).should eq(moderated_chat)
#    end
#  end
#
#  describe "GET new" do
#    it "assigns a new moderated_chat as @moderated_chat" do
#      get :new, {}, valid_session
#      assigns(:moderated_chat).should be_a_new(ModeratedChat)
#    end
#  end
#
#  describe "GET edit" do
#    it "assigns the requested moderated_chat as @moderated_chat" do
#      moderated_chat = ModeratedChat.create! valid_attributes
#      get :edit, {:id => moderated_chat.to_param}, valid_session
#      assigns(:moderated_chat).should eq(moderated_chat)
#    end
#  end
#
#  describe "POST create" do
#    describe "with valid params" do
#      it "creates a new ModeratedChat" do
#        expect {
#          post :create, {:moderated_chat => valid_attributes}, valid_session
#        }.to change(ModeratedChat, :count).by(1)
#      end
#
#      it "assigns a newly created moderated_chat as @moderated_chat" do
#        post :create, {:moderated_chat => valid_attributes}, valid_session
#        assigns(:moderated_chat).should be_a(ModeratedChat)
#        assigns(:moderated_chat).should be_persisted
#      end
#
#      it "redirects to the created moderated_chat" do
#        post :create, {:moderated_chat => valid_attributes}, valid_session
#        response.should redirect_to(ModeratedChat.last)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns a newly created but unsaved moderated_chat as @moderated_chat" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        ModeratedChat.any_instance.stub(:save).and_return(false)
#        post :create, {:moderated_chat => { "message" => "invalid value" }}, valid_session
#        assigns(:moderated_chat).should be_a_new(ModeratedChat)
#      end
#
#      it "re-renders the 'new' template" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        ModeratedChat.any_instance.stub(:save).and_return(false)
#        post :create, {:moderated_chat => { "message" => "invalid value" }}, valid_session
#        response.should render_template("new")
#      end
#    end
#  end
#
#  describe "PUT update" do
#    describe "with valid params" do
#      it "updates the requested moderated_chat" do
#        moderated_chat = ModeratedChat.create! valid_attributes
#        # Assuming there are no other moderated_chats in the database, this
#        # specifies that the ModeratedChat created on the previous line
#        # receives the :update_attributes message with whatever params are
#        # submitted in the request.
#        ModeratedChat.any_instance.should_receive(:update).with({ "message" => "MyText" })
#        put :update, {:id => moderated_chat.to_param, :moderated_chat => { "message" => "MyText" }}, valid_session
#      end
#
#      it "assigns the requested moderated_chat as @moderated_chat" do
#        moderated_chat = ModeratedChat.create! valid_attributes
#        put :update, {:id => moderated_chat.to_param, :moderated_chat => valid_attributes}, valid_session
#        assigns(:moderated_chat).should eq(moderated_chat)
#      end
#
#      it "redirects to the moderated_chat" do
#        moderated_chat = ModeratedChat.create! valid_attributes
#        put :update, {:id => moderated_chat.to_param, :moderated_chat => valid_attributes}, valid_session
#        response.should redirect_to(moderated_chat)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns the moderated_chat as @moderated_chat" do
#        moderated_chat = ModeratedChat.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        ModeratedChat.any_instance.stub(:save).and_return(false)
#        put :update, {:id => moderated_chat.to_param, :moderated_chat => { "message" => "invalid value" }}, valid_session
#        assigns(:moderated_chat).should eq(moderated_chat)
#      end
#
#      it "re-renders the 'edit' template" do
#        moderated_chat = ModeratedChat.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        ModeratedChat.any_instance.stub(:save).and_return(false)
#        put :update, {:id => moderated_chat.to_param, :moderated_chat => { "message" => "invalid value" }}, valid_session
#        response.should render_template("edit")
#      end
#    end
#  end
#
#  describe "DELETE destroy" do
#    it "destroys the requested moderated_chat" do
#      moderated_chat = ModeratedChat.create! valid_attributes
#      expect {
#        delete :destroy, {:id => moderated_chat.to_param}, valid_session
#      }.to change(ModeratedChat, :count).by(-1)
#    end
#
#    it "redirects to the moderated_chats list" do
#      moderated_chat = ModeratedChat.create! valid_attributes
#      delete :destroy, {:id => moderated_chat.to_param}, valid_session
#      response.should redirect_to(moderated_chats_url)
#    end
#  end

end
